<html>
<head>
<script src="/javascripts/calculator.js"></script>
<script src="/javascripts/clock.js"></script>
<script src="/javascripts/jquery-2.0.0.min.js"></script>
</head>
<body>
<h1>
    <p>add prop</p>
    <button onclick='tstnew()'>tstnew</button> <button onclick='tstDbus()'>tstDbus</button><button onclick='tstprocess()'>tstprocess</button>
    <button onclick='tstmongo()'>tstmongo</button>
    <button onclick='tstnodecanvas()'>tstnodecanvas</button>
    <img id='idnodecanvas' style='width:200px;height:200px'></img>
    <br></br><button onclick='tstredis()'>tstredis</button>
    <br><br><button onclick='tstwindow()'>tstwindowX</button> 
    <br><br><button onclick='tstseed()'>tstseedSoup</button> <button onclick='tstseedgtk()'>tstseedgtk</button> <button onclick='tstcal()'>tstcal</button><button onclick='tstseedprint()'>tstseedprint</button>
    <br><br><button onclick='tstOrigNode()'>tstOrigNode</button> <button onclick="testorigOpen()">testorigOpen</button>
    <br><br><button onclick='tstCb()'>tstCb2</button> <button onclick='tstOrigCb()'>tstOrigCb5</button><button onclick='tstNestedCb()'>tstNestedCb</button>
    <div id="test" style="width:1px;height:17px;background:#0f0;">15%</div>
    <br><input type="button" value="Run" onclick="runanimation()"/> <button onclick="testwebdb()">testwebdb</button>
    <br><button onclick="addevent()">addEventListener</button><button id='ideventbtn'>test orig event cb</button>

    <script>
        function tstredis(){
            function mprint(msg){
                if(typeof(print)!="undefined"){
                    print(msg);
                }else{
                    console.log(msg);
                }
            }

            function opredis(){
                print("=========opredis in=======")
                var redis = require("redis"),
                client = redis.createClient();

                client.hmset('sessionid', { username: 'kris', password: 'password' }, function(err) {
                    print('============redis err====='+err)
                })

                client.hgetall('sessionid', function(err, object) {
                    alert('redis get res='+object)
                })
            }
            opredis();


        }
        function tstnodecanvas(){
            try{
                var data=showdata();
                $("#idnodecanvas").attr("src",data);
                //calculatormain();
            }catch(e){
                alert(e);
            }
        }
        function tstmongo(){
            try{
                 mongodb = require('mongodb');
                print("typeof mongodb="+typeof(mongodb));
                var ff=typeof(mongodb.Server);
                 ff=typeof(mongodb.Server);
                gmongo=mongodb;
                print("typeof mongodb.Server="+ff);
                 server = new mongodb.Server('localhost',27017,{auto_reconnect:true});
                 db = new mongodb.Db('mydb',server,{safe:true});
                db.open(function(err,db){
                    if(!err){ 
                        db.collection('mycoll',{safe:true},function(err,collection){
                            var tmp1 = {title:'hello',number:1};
                            collection.insert(tmp1,{safe:true},function(err,result){
                                if(err){
                                    print("db insert err="+err);
                                    return;
                                }
                                alert("db insert ok,res="+result);
                            });
                        }); 
                    }else{
                        print("db open err=",err);
                    } 
                });
            }catch(e){
                alert(" e="+e);
            }
        }
        function tstprocess(){
            var res="process.arch="+process.arch;
            res+=("\nprocess.stderr.fd="+process.stderr.fd);
            res+=("\nprocess.getuid()="+process.getuid());
            res+=("\n");
            alert(res);
        }
        function tstNestedCb(){
            var fs=require('fs');
            fs.open('/home/sin/tmp/webjs','r',function(e,fd){
                alert('ok in open callback,fd='+fd);
                fs.fstat(fd,function(){
                    alert('ok in nested fstat callback');
                });
            });
        }
        function tstseedprint(){
            print("output by seed print function");
        }
        function tstcal(){
            try{
                calculatormain();
            }catch(e){
                alert("tstcal e="+e);
            }
            //tstinclude();
        }
        function addevent(){
            var eventbtn = document.querySelector("#ideventbtn");
            eventbtn.addEventListener("click",dbcallback,false);
        }
        function dbcallback(){
            console.log("dbcallback");
            alert("dbcallback");
        }
        function testwebdb(){
            var db = openDatabase('testDB', '1.0', 'Test DB', 2 * 1024 * 1024,dbcallback);
        }
        var start = null;
        var ele = document.getElementById("test");
        var progress = 0;

        function step(timestamp) {
            progress += 1;
            ele.style.width = progress + "%";
            ele.innerHTML=progress + "%";
            if (progress < 100) {
                requestAnimationFrame(step);
            }
        }
        function runanimation(){
            progress=0;
            requestAnimationFrame(step);
        }

        var i=1;
        function jsccallback(){
            alert("h,ok in jsc callback, global ii="+i);
        }
        function testorigOpen(){
            var fs=require('fs');
            fs.open('/home/sin/tmp/webjs','r',jsccallback);
        }
        function tstseedcal(){

        }
        function tstseedgtk(){
            try{
            Gtk = imports.gi.Gtk;
            Gtk.init (null, null);

            var window = new Gtk.Window();
            var view = new Gtk.TextView();
            var buffer = view.buffer;

            window.signal.hide.connect(Gtk.main_quit);

            var ret_begin = {}

            buffer.get_start_iter (ret_begin);

            buffer.insert(ret_begin.iter, "Hello GtkTextView world.", -1);

            window.add(view);
            window.show_all();
            window.resize(300, 300);   

            Gtk.main();

            }catch(e){
                alert("seedgtk e="+e.message);
            }
        }

        function tstseed(){
            var url="http://www.baidu.com";
            try{
                Soup = imports.gi.Soup;

                var session = new Soup.SessionSync();

                var uri = new Soup.URI.c_new(url);
                var request = new Soup.Message({method:"GET", uri:uri});

                var status = session.send_message(request);

                print("soup get "+url+" status="+status);

            }catch(e){
                alert("seed e="+e.message);
            }
        }
        function tstCb(){
            try{
                var np=window.require('fs');
                np.writeFile('/home/sin/tmp/webjs',"write from jsc",jsccallback);

                var wf=np.writeFile;
                //print("typeof(wf)="+typeof(wf));
                //wf('/home/sin/tmp/webjs',"write from jsc",jsccallback);
                //np.write('file',function(){alert('ok in callback');});
            }catch(e){
                alert("e="+e.message);
            }
        }
        function tstOrigCb(){
            var fs=require('fs');
            fs.writeFile('/home/sin/tmp/webjs','by tstOrigCb',callback);
        }
        giff=null;
        giface=null;
        function tstDbus(){
                console.log("in tstDbus");
            try{
                var DBus = require('dbus');
                var dbus = new DBus();
                var bus = dbus.getBus('session');
                bus.getInterface('nodejs.dbus.ExampleServiceA', 
                                 '/nodejs/dbus/ExampleServiceA', 
                                 'nodejs.dbus.ExampleServiceA.Interface1', 
                                function(err, iface) {
                                    print("dbus cb Hello calling 1");
                                    giface=iface;
                                    iface.Hello['timeout']=1000;
                                    iface.Hello['finish']=function(){
                                        alert("ok iface.Hello exe finished");
                                    }
                                    print("=====dbus cb Hello calling iface.Hello.timeout="+iface.Hello.timeout);
                                    iface.Hello();
                });
            }catch(e){
                alert("e="+e.message);
            }
        }
        function tstnew(){
            try{
                var j=5;
                var np=window.require('fs');
            }catch(e){
                alert("e="+e.message);
            }

        }
        function tstrequire(){
            var np=window.require('fs');
            //console.log("require obj="+np+",np.hello="+np.hello);
            try{
            np.hello();
            //var res=np.write;
            var res=np.write('file');
            alert("np.write(file) res="+res);
            }catch(e){
                alert("e="+e.message);
            }
            if(true){
                np.tstval=1;
                //np.hello();
                //console.log("np.tstval="+np.tstval);
            }
        }
        function tstwindow(){
            window.documentX='asdfa';
            print("finish tstwindow ");
            /*
            print("type window.nothing = "+typeof(window.nothing));
            window.nothing='kkk';
            print("window.nothing="+window.nothing);
            window['nothingB']='bbb';
            window.tmpc=function(){print("ok window.tmpc")};
            window.tmpc['pc']='pc';
            print("window.tmpc added prop pc");
            window.tmpc();
            */
        }
        function tstOrigNode(){
            var fs=require('fs');
            fs.writeFile('/home/sin/tmp/webjs','by orig nodejs',callback);
        }
    </script>
</h1>
</body>
</html>
